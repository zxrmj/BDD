// 相机线程0，检测电池侧面
void thread_camera0(Cmfc_batteryDlg *dlg, HANDLE handle,bool is_trggier)
{
	XI_IMG image; 
	memset(&image, 0, sizeof(image)); 
	image.size = sizeof(XI_IMG);

	// 分类器1：检测已包膜电池划痕缺陷
	Classifier classifier_1;
	classifier_1.Load("net1.xml");
	classifier_1.ExtractFeatureFunction = feature::extractColorFeature;
	// 分类器2：检测未包膜电池凹坑缺陷
	Classifier classifier_2;
	classifier_2.Load("net2.xml");
	classifier_2.ExtractFeatureFunction = feature::extractNakedFeature;

	// 用于侧面检测帧计数的变量
	int &frame_cur_count = dlg->frame_cur_count;
	int &frame_max_count = dlg->frame_max_count;
	
	if (is_trggier)
	{
		frame_max_count = 4; // 如果使用触发器，每当当前帧等于frame_max_count的值的时候统计结果
	}
	else
	{
		frame_max_count = 1;
	}

	int color_battery_result = -1; // 说明已包膜电池缺陷属于第几帧
	int naked_battery_result = -1; // 说明未包膜电池缺陷属于第几帧
	Mat battery_image_buffer; // 缓存缺陷图片

	TickMeter tm; // 计时器，统计处理当前电池所消耗时间
	// 电池编号计数

	dlg->battery_count = 0;

	XI_RETURN stat = XI_OK;
	for (;;)
	{
		// 如果3台相机未都准备就绪，则继续等待
		if (is_trggier && dlg->side_processed)
		{
			Sleep(50);
			continue;
		}
		else
		{
			// 获取相机图片
			stat = xiGetImage(handle, 1000, &image);
			if (stat == XI_OK)
			{
				// img存储相机捕获到的图像
				Mat img(Size(image.width, image.height), CV_8UC3);
				// 将图像数据从相机缓存区拷贝到img
				memcpy(img.data, image.bp, image.width*image.height * 3);
				
				if (dlg->color_battery) // 电池为已包膜电池
				{
					if (frame_cur_count == 0)
					{
						tm.start(); // 第一帧开始计时
					}
					Mat battery;
					region::detectColourBattery(img, battery); // 电池定位算法
					if (battery.data) // 成功定位到电池
					{
						vector<pair<float, int>> result; // 存储分类器返回的结果
						Mat feat_vec = classifier_1.ExtractFeatureFunction(battery); // 提取特征向量
						classifier_1.Predict(feat_vec, result, RESULT_ORDER::ORDER_DECENDING); // 执行分类

						// 这部分代码是在界面中显示输出单元的输出
						ostringstream ss;
						ss << "[";
						for (int k = 0; k < result.size(); k++)
						{
							ss << result[k].second << ":" << result[k].first << "\t";
						}
						ss << "]";
						string str = ss.str();
						dlg->showStatic(IDC_DFT8, str.c_str()); // 将测试结果输出到界面
						if (result[0].second == 0) // 结果按输出单元的值的大小降序排序
						{
							dlg->showStatic(IDC_DFT1, "侧面划痕缺陷");
						}
						else
						{
							dlg->showStatic(IDC_DFT1, "无缺陷");
						}

						// 如果使用触发器，则需要等待所有帧处理完再显示检测结果
						if (is_trggier)
						{
							if (result[1].first > 0.75)
							{
								naked_battery_result = frame_cur_count; // 当前帧有缺陷
								battery_image_buffer = img;
							}

							// 当前帧计数
							frame_cur_count++;
							// 如果当前帧
							if (frame_cur_count == frame_max_count)
							{
								if (naked_battery_result > -1) // 如果结果值标号大于-1，说明存在缺陷
								{
									dlg->showStatic(IDC_DFT1, "侧面划痕缺陷"); // 提示侧面凹坑缺陷
									dlg->DrawPicToHDC(battery_image_buffer, 0);
								}
								else
								{
									dlg->showStatic(IDC_DFT1, "无缺陷");
									dlg->DrawPicToHDC(img, 0); // 如无缺陷，显示最后一帧的电池图像
								}
								naked_battery_result = -1; // 重置为-1
								tm.stop();
								// 在这里获取处理时间
								tm.reset();

								// 对该电池表面已处理计数
								mutex locker;
								locker.lock();
								dlg->side_processed += 1; // 电池表面已处理计数+1
								if (dlg->side_processed == 3) // 三表面均以处理
									dlg->side_processed = 0; // 重置为0，表示进入下一循环后将开始处理新的电池
								locker.unlock();
							}
							else
							{
								dlg->DrawPicToHDC(img, 0); // 绘制当前帧的图像至界面
							}
						}
						// 不使用触发器
						else
						{
							if (result[1].first > 0.75)
							{
								dlg->showStatic(IDC_DFT2, "侧面划痕缺陷");
							}
							else
							{
								dlg->showStatic(IDC_DFT2, "无缺陷");
							}
							tm.stop();
							// 在这里获取处理时间
							tm.reset(); // 重置定时器

										// 对该电池表面已处理计数
							mutex locker;
							locker.lock();
							dlg->side_processed += 1; // 电池表面已处理计数+1
							if (dlg->side_processed == 3) // 三表面均以处理
								dlg->side_processed = 0;// 重置为0，表示进入下一循环后将开始处理新的电池
							locker.unlock();

						} // if(is_trigger) end
					}
				}
				else // 电池为未包膜电池
				{
					if (frame_cur_count == 0)
					{
						tm.start(); // 第一帧开始计时
					}
					dlg->showStatic(IDC_DFT1, "正在检测");
					Mat battery;
					region::detectNakedBattery(img, battery); // 未包膜电池定位算法
					if (battery.cols && battery.rows) // 如果定位到电池
					{
						vector<pair<float, int>> result; // 存储分类器返回的结果
						Mat feat_vec = classifier_2.ExtractFeatureFunction(battery); // 提取特征向量
						classifier_2.Predict(feat_vec, result, RESULT_ORDER::ORDER_NORMAL); // 分类器分类，结果按输出单元的顺序排列
						ostringstream ss;
						ss << "[";
						for (int k = 0; k < result.size(); k++)
						{
							ss << result[k].second << ":" << result[k].first << "\t";
						}
						ss << "]";
						string str = ss.str();
						dlg->showStatic(IDC_DFT8, str.c_str()); // 将测试结果输出到界面

						// 如果使用触发器，则需要等待所有帧处理完再显示检测结果
						if (is_trggier)
						{
							if (result[1].first > 0.75)
							{
								naked_battery_result = frame_cur_count; // 当前帧有缺陷
								battery_image_buffer = img;
							}

							// 当前帧计数
							frame_cur_count++;
							// 如果当前帧
							if (frame_cur_count == frame_max_count)
							{
								if (naked_battery_result > -1) // 如果结果值标号大于-1，说明存在缺陷
								{
									dlg->showStatic(IDC_DFT1, "侧面凹坑缺陷"); // 提示侧面凹坑缺陷
									dlg->DrawPicToHDC(battery_image_buffer, 0);
								}
								else
								{
									dlg->showStatic(IDC_DFT1, "无缺陷");
									dlg->DrawPicToHDC(img, 0); // 如无缺陷，显示最后一帧的电池图像
								}
								naked_battery_result = -1; // 重置为-1
								tm.stop();
								// 在这里获取处理时间
								tm.reset();

								// 对该电池表面已处理计数
								mutex locker;
								locker.lock();
								dlg->side_processed += 1; // 电池表面已处理计数+1
								if (dlg->side_processed == 3) // 三表面均以处理
									dlg->side_processed = 0; // 重置为0，表示进入下一循环后将开始处理新的电池
								locker.unlock();
							}
							else
							{
								dlg->DrawPicToHDC(img, 0); // 绘制当前帧的图像至界面
							}
						}
						// 不使用触发器
						else
						{
							if (result[1].first > 0.75)
							{
								dlg->showStatic(IDC_DFT2, "侧面凹坑缺陷");
							}
							else
							{
								dlg->showStatic(IDC_DFT2, "无缺陷");
							}
							tm.stop();
							// 在这里获取处理时间
							tm.reset(); // 重置定时器

							// 对该电池表面已处理计数
							mutex locker;
							locker.lock();
							dlg->side_processed += 1; // 电池表面已处理计数+1
							if (dlg->side_processed == 3) // 三表面均以处理
								dlg->side_processed = 0;// 重置为0，表示进入下一循环后将开始处理新的电池
							locker.unlock();

						} // if(is_trigger) end

					}
				} // if(battery.data) end
				
			}
			else if (stat == XI_TIMEOUT)
			{
				dlg->showStatic(IDC_STATBAR, "相机0等待超时");
				dlg->showStatic(IDC_DFT1, "超时");
			}
			else
			{
				dlg->MessageBoxW(_T("Error:\n相机0获取图片失败"));
			}
			
		}
	}
}